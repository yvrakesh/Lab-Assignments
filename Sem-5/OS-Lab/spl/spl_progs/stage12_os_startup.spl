// Load library code in mem page 63,64 from disk block 13,14
loadi(63,13);
loadi(64,14);

// Load init code in mem page 65,66 from disk block 7,8
loadi(65,7);
loadi(66,8);

// Load int 10 software interrupt in mem page 22,23 from disk block 35,36
loadi(22,35);
loadi(23,36);

//Load exception handler in mem page 2,3 from disk block 15,16
loadi(2,15);
loadi(3,16);

//Loading timer interrupt in mem page 4,5 from disk block 17,18
loadi(4, 17);
loadi(5, 18);

//Load int 7 software interrupt in mem page 16,17 from disk block 29,30
loadi(16,29);
loadi(17,30);

//Load idle process from diskblock 11,12 to mem page 69,70
loadi(69,11);
loadi(70,12);

//First Process : Idle Process

PTBR = PAGE_TABLE_BASE;
PTLR = 10;
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;        
[PTBR+13] = "0000";
[PTBR+14] = -1;           
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;        
[PTBR+19] = "0000";


//Second Process


PTBR = PTBR+20;

//Library ---> 2 pages
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap ----->  2 pages
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code -----> 4 pages
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack  ------> 2 pages
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


// PROCESS_TABLE FOR PID = 0  (IDLE PROCESS)

[PROCESS_TABLE + 1] = 0;		//	PID
[PROCESS_TABLE + 4] = CREATED;		//	STATE
[PROCESS_TABLE + 11] = 82;		//	USER AREA PAGE NUMBER
[PROCESS_TABLE + 12] = 0;		//	Kernel Stack Pointer (KPTR)
[PROCESS_TABLE + 13] = 8*512;		//	User Stack Pointer (UPTR)
[PROCESS_TABLE + 14] = PTBR-20;	//	PTBR
[PROCESS_TABLE + 15] = 10;		//	PTLR



// PROCESS TABLE FOR PID = 1 (INIT PROCESS) 

[PROCESS_TABLE + 16 + 1] = 1;		//	PID
[PROCESS_TABLE + 16 + 4] = RUNNING;	//	STATE	
[PROCESS_TABLE + 16 + 11] = 80;	//	USER AREA PAGE NUMBER
[PROCESS_TABLE + 16 + 12] = 0;		//	Kernel Stack Pointer ( KPTR)
[PROCESS_TABLE + 16 + 13] = 8*512;	//	User Stack Pointer (UPTR)
[PROCESS_TABLE + 16 + 14] = PTBR;	//	PTBR
[PROCESS_TABLE + 16 + 15] = 10;	//	PTLR


SP = 8*512;

[81*512] = [69*512 + 1];   // As it's in privileged mode no address translation required and Page 69 starting entry points to code section
[76*512] = [65*512 + 1];  //  Page 65 starting entry points to code section of INIT process
[SYSTEM_STATUS_TABLE + 1] = 1;
PTLR = 10;

ireturn; //IRET
