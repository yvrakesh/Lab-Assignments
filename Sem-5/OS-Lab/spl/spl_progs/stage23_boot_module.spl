// Load all the other modules in this instead of in os_startup code.

//Load exception handler in mem page 2,3 from disk block 15,16
loadi(2,15);
loadi(3,16);

//Loading timer interrupt in mem page 4,5 from disk block 17,18
loadi(4, 17);
loadi(5, 18);

// Load Console interrupt handler from disk block 21,22 to the mem page 8,9
loadi(8,21);	
loadi(9,22);

// Load Interrupt 6 from disk block 27,28 to mem page 14,15
loadi(14,27);
loadi(15,28);

//Load int 7 software interrupt in mem page 16,17 from disk block 29,30
loadi(16,29);
loadi(17,30);

// Load int 10 software interrupt in mem page 22,23 from disk block 35,36
loadi(22,35);
loadi(23,36);

// Load library code in mem page 63,64 from disk block 13,14
loadi(63,13);
loadi(64,14);

// Load init code in mem page 65,66 from disk block 7,8
loadi(65,7);
loadi(66,8);

// Load Resource Manager (Module 0) from disk 53,54 to mem page 40,41
loadi(40,53);
loadi(41,54);

// Load Device Manager module (Module 4) from disk 61,62 to mem page 48,49
loadi(48,61);
loadi(49,62);

// Load scheduler (Module 5) from disk 63,64 to mem page 50,51
loadi(50, 63); 
loadi(51, 64);

//Load idle process from diskblock 11,12 to mem page 69,70
loadi(69,11);
loadi(70,12);

//Load int9 process from diskblock 33,34 to mem page 20,21
loadi(20,33);	
loadi(21,34);

// Load module 1 from diskblock 55,56 to mem page 42,43
loadi(42,55);	
loadi(43,56);

//Load module 2 from diskblock 57,58 to mem page 44,45
loadi(44,57);	
loadi(45,58);

//Load inode table from diskblock 3,4 to the mem page 59,60
loadi(59,3);
loadi(60,4);

// Load disk controller from diskblock 19,20 to the mem page 6,7
loadi(6,19);
loadi(7,20);

// Load disk free list from disk block 2 to mem page 61
loadi(61,2);

// Load int8 from disk block 31,32 to the mem page 18,19
loadi(18,31);
loadi(19,32);

// Load int11 from disk block 37,38 to the mem page 24,25
loadi(24,37);
loadi(25,38);

// Load int15 from disk block 45,46 to the mem page 32,33
loadi(32,45);
loadi(33,46);

// Load int13 from disk block 41,42 to the mem page 28,29
loadi(28,41);
loadi(29,42);

// Load int14 from disk block 43,44 to the mem page 30,31
loadi(30,43);
loadi(31,44);

// Load shell from disk block 9,10 to the mem page 67,68
loadi(67,9);
loadi(68,10);

// Load int4 from disk block 23, 24 to the mem page 10,11
loadi(10,23);
loadi(11,24);

// Load root file from disk block 5 to the mem page 62
loadi(62,5);

//Second Process : Init 

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//Library ---> 2 pages
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap ----->  2 pages
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code -----> 4 pages
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack  ------> 2 pages
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// PROCESS TABLE FOR PID = 1 (INIT PROCESS) 

[PROCESS_TABLE + 16 + 1] = 1;		//	PID
[PROCESS_TABLE + 16 + 3] = 1;
[PROCESS_TABLE + 16 + 4] = CREATED;	//	STATE	
[PROCESS_TABLE + 16 + 11] = 80;		//	USER AREA PAGE NUMBER
[PROCESS_TABLE + 16 + 12] = 0;		//	Kernel Stack Pointer ( KPTR)
[PROCESS_TABLE + 16 + 13] = 8*512;	//	User Stack Pointer (UPTR)
[PROCESS_TABLE + 16 + 14] = PTBR;	//	PTBR
[PROCESS_TABLE + 16 + 15] = 10;		//	PTLR

// Value at 65*512+1 is the entry point of idle process code i.e. The location from which the idle code execution should start
//That is given to mem page 76 because initially IP points to SP.
[76*512] = [65*512+1];


// A maximum of 16 process can be scheduled in expOS 
// As we have only three processes change status of rest all processes to "TERMINATED"
alias i R1;
i = 2;
while(i < 16) do
	[PROCESS_TABLE + i*16 + 4] = TERMINATED;
	i = i+1;
endwhile;

i = 0;
while(i<128) do 
	if(i<83) then 
		[MEMORY_FREE_LIST + i] = 1;
	else
		[MEMORY_FREE_LIST + i] = 0;
	endif;
	i = i + 1;
endwhile;

i = 0;
while ( i < MAX_FILE_NUM) do
	// Locking PID is set to -1
	[FILE_STATUS_TABLE + 4*i] = -1;
	// File Open Count is set to -1
	[FILE_STATUS_TABLE + 4*i + 1] = -1;
	i = i + 1;
endwhile;

i = 0;
while ( i < MAX_BUFFER) do
	// Block number is set to -1
	[BUFFER_TABLE + 4*i] = -1;
	// Dirty Bit is set to 0
	[BUFFER_TABLE + 4*i + 1] = 0;
	// Locking PID is set to -1
	[BUFFER_TABLE + 4*i + 2] = -1;
	i = i + 1;
endwhile;

[TERMINAL_STATUS_TABLE] = 0; // Set Terminal to be free initially
[SYSTEM_STATUS_TABLE+3] = 0;	//wait_mem_count
[SYSTEM_STATUS_TABLE+2] = 45;	//mem_free_count
[DISK_STATUS_TABLE] = 0; // Set Disk acquire to be free initially

i = 496; // Initialize per process resource table 

while(i<=510) do
	[80*512+i] = -1;
	i = i + 1;
endwhile;

// Initializing Disk Map Table

i = DISK_MAP_TABLE + 10;
[i + 0] = -1;
[i + 1] = -1;
[i + 2] = -1;
[i + 3] = -1;
[i + 4] = 7;
[i + 5] = 8;
[i + 6] = -1;
[i + 7] = -1;
[i + 8] = -1;
[i + 9] = -1;

// Initializing Semaphore table
R1 = 0;
while (R1 < MAX_SEM_COUNT) do
	// Locking PID to -1
	[SEMAPHORE_TABLE + 4*R1] = -1;
	// Process count to 0
	[SEMAPHORE_TABLE + 4*R1 + 1] = 0;
R1 = R1 + 1;
endwhile;

return;
