// System call number 1 for Get Free Page 
if(R1 == 1) then
	backup;

	// INCREMENT THE WAIT MEMORY COUNT
	[SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3] + 1;

	while([SYSTEM_STATUS_TABLE+2] == 0) do
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = WAIT_MEM;
		backup;
		call MOD_5; 	// SCHEDULER
		restore; 
	endwhile;
	
	// DECREASING THE MEM_FREE_COUNT
	[SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]-1;
	
	// DECREASING THE WAIT_MEM_COUNT
	[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]-1;

	restore;

	//find a free page using memory free list
	// MAX_MEM_PAGE = 128

	alias i R0;
	i = 76;
	while(i<MAX_MEM_PAGE) do
		if([MEMORY_FREE_LIST+i]==0) then
			[MEMORY_FREE_LIST+i] = 1;
			R0 = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	breakpoint;
	return;

endif;

// System Call number for release page
if(R1 == 2) then
	backup;
		
	alias page_num R2;
	[MEMORY_FREE_LIST + page_num] = [MEMORY_FREE_LIST + page_num] - 1;
	
	//if this page is not used by anyone	
	if([MEMORY_FREE_LIST + page_num] == 0) then
		//increment the memory free count
		[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]+1;
	endif;
	
	//update the status of processes waiting for memory
	alias i R3;
	i = 0;
	
	while(i<16) do
		if([PROCESS_TABLE+16*i+4] == WAIT_MEM) then
			[PROCESS_TABLE+16*i+4] = READY;
		endif;
		i = i + 1;
	endwhile;

	restore;	
	breakpoint;		
	return;
endif;
