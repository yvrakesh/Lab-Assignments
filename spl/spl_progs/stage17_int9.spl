alias userSP R0;
alias FileName R1;
alias index R2;

userSP = SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13] = SP;
SP = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512) - 1;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 9;

FileName = [([PTBR + (2 * ((userSP - 4) / 512))] * 512) + ((userSP - 4) % 512)];

index = 0;
R3 = 1;

alias i R2;
alias index R3;
alias flag R4;
flag = 1;

// Max num of files allowed is 60. Check in using inode table copy whether a file is there in xexe format or not
i = 0;
while(i < MAX_FILE_NUM) do
	if(([INODE_TABLE + i*16] == EXEC) && ([INODE_TABLE + i*16 + 1] == FileName)) then
		index = i;
		flag = 0;
		break;			
	endif;
i = i+1;
endwhile;

// If file is not found
if(flag == 1) then	
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
	[[PTBR + 2*((userSP - 1)/512)]*512 + (userSP - 1)%512] = -1; // return -1 indicating failure
	SP = userSP;
	ireturn;	
endif;

// Else set the return value to 0 indicating success
[[PTBR+(2*((userSP-1))/512)]*512 + (userSP-1)%512] = 0;

backup;
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
restore;

[MEMORY_FREE_LIST + [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]] = 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512) - 1;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = RUNNING;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 7] = index;

PTBR = PAGE_TABLE_BASE + (20 * [SYSTEM_STATUS_TABLE + 1]);

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//HEAP
backup;
R1 = 1;
call MOD_2;
[PTBR+4] = R0;
[PTBR+5] = "0110";
restore;

backup;
R1 = 1;
call MOD_2;
[PTBR+6] = R0;
[PTBR+7] = "0110";
restore;

//STACK
backup;
R1 = 1;
call MOD_2;
[PTBR+16] = R0;
[PTBR+17] = "0110";
restore;

backup;
R1 = 1;
call MOD_2;
[PTBR+18] = R0;
[PTBR+19] = "0110";
restore;

//CODE
backup;
R1 = 1;
call MOD_2;
[PTBR+8] = R0;
[PTBR+9] = "0100";
restore;

backup;
R1 = 1;
call MOD_2;
[PTBR+10] = R0;
[PTBR+11] = "0100";
restore;

backup;
R1 = 1;
call MOD_2;
[PTBR+12] = R0;
[PTBR+13] = "0100";
restore;

backup;
R1 = 1;
call MOD_2;
[PTBR+14] = R0;
[PTBR+15] = "0100";
restore;


if([INODE_TABLE+index*16+8]!=-1) then	
	loadi([PTBR+8],[INODE_TABLE+index*16+8]);

	if([INODE_TABLE+index*16+9]!=-1) then
		loadi([PTBR+10],[INODE_TABLE+index*16+9]);

if([INODE_TABLE+index*16+10]!=-1) then
	loadi([PTBR+12],[INODE_TABLE+index*16+10]);

if([INODE_TABLE+index*16+11]!=-1) then
	loadi([PTBR+14],[INODE_TABLE+index*16+11]);
endif;
endif;
endif;
endif;

//store the entry point into the user stack
[[PTBR+16]*512] = [[PTBR+8]*512+1];

//change the SP to user stack
SP = 8*512;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;

ireturn;
