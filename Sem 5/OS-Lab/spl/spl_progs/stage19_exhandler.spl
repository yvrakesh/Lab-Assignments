[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = -1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11] * 512 - 1;

backup;
multipush(EIP);
breakpoint;
if( EC == 1) then
	backup;
	print("Illegal Instruction");
	R1 = EXIT_PROCESS;
	call MOD_1;
	restore;
	call MOD_5;
endif;

if( EC == 2) then
	backup;
	breakpoint;
	print("Illegal Mem access");
	breakpoint;
	R1 = EXIT_PROCESS;
	call MOD_1;
	restore;
	call MOD_5;
endif;

if (EC == 3) then
	backup;
	print("Arithmetic exception");
	R1 = EXIT_PROCESS;
	call MOD_1;
	restore;
	call MOD_5;
endif;

if( EC == 0) then
	if( EPN == 2 || EPN == 3) then
		backup;
		R1 = GET_FREE_PAGE;
		call MOD_2;
		[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 4] = R0;
		[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 5] = "1110";
		restore;
		backup;
		R1 = GET_FREE_PAGE;
		call MOD_2;
		[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 6] = R0;
		[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 7] = "1110";
		restore;
	endif;
	
	if(EPN == 4 || EPN == 5 || EPN == 6 || EPN == 7) then
		backup;
		multipush(EC,EIP,EPN,EMA);
		R1 = GET_CODE_PAGE;
		R2 = [DISK_MAP_TABLE + 10 * [SYSTEM_STATUS_TABLE + 1] + EPN];
		call MOD_2;
		multipop(EC,EIP,EPN,EMA);
		[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 2 * EPN] = R0;
		[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 2 * EPN + 1] = "1100";
		restore;
	endif;
endif;

multipop(EIP);

restore;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
SP = SP+1;

[[PTBR + (2*(SP/512))] * 512 + (SP%512)] = EIP;
ireturn;
